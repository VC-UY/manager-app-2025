"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-wkuv1(6cozvxe90wo4f5p7+u%%y(2om69^ixxd+s@y7-hwz6^%"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    
    # Third-party apps
    'rest_framework',
    'corsheaders',
    'channels',
    'django_celery_beat',
    'django_celery_results',
    
    # Project apps
    'workflows',
    'tasks',
    'communication',
    'results',
    'users',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    'corsheaders.middleware.CorsMiddleware',  
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, 'templates')],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"
ASGI_APPLICATION = "core.asgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# SQLite pour les modèles Django et l'authentification
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Configuration pour MongoDB
MONGODB_URI = 'mongodb://localhost:27017/'
MONGODB_NAME = 'workflow_manager'

# Configuration du coordinateur
COORDINATOR_API_URL = 'http://localhost:8001/api'
COORDINATOR_API_KEY = 'dev_api_key'
COORDINATOR_API_SECRET = 'dev_api_secret'
COORDINATOR_API_TIMEOUT = 10  # secondes

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "fr-fr"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# STATICFILES_DIRS commenté comme indiqué dans vos notes
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'static'),
# ]

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True  # Pour le développement seulement
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

# Configuration REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
}

# Configuration Channels pour WebSockets
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',  # Pour le développement
        # Pour la production, utilisez Redis:
        # 'BACKEND': 'channels_redis.core.RedisChannelLayer',
        # 'CONFIG': {
        #     'hosts': [('127.0.0.1', 6379)],
        # },
    },
}

# Configuration Celery
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'django-db'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'

# Configuration des tâches périodiques
CELERY_BEAT_SCHEDULE = {
    'check-task-timeouts': {
        'task': 'tasks.tasks.check_task_timeouts',
        'schedule': timedelta(minutes=5),
    },
    'check-pending-aggregations': {
        'task': 'tasks.tasks.check_pending_aggregations',
        'schedule': timedelta(minutes=2),
    },
    'update-workflow-statuses': {
        'task': 'tasks.tasks.update_workflow_statuses',
        'schedule': timedelta(minutes=3),
    },
}

# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'workflow_manager.log'),
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'workflows': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'tasks': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'communication': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'results': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# Assurez-vous que le répertoire des logs existe
os.makedirs(os.path.join(BASE_DIR, 'logs'), exist_ok=True)

# Configuration Docker
DOCKER_REGISTRY = os.environ.get('DOCKER_REGISTRY', 'docker.io')
DOCKER_NAMESPACE = os.environ.get('DOCKER_NAMESPACE', 'patricehub')
DOCKER_PUSH_ENABLED = os.environ.get('DOCKER_PUSH_ENABLED', 'True').lower() in ('true', '1', 't')
DOCKER_USERNAME = os.environ.get('DOCKER_USERNAME', 'patricehub')
DOCKER_PASSWORD = os.environ.get('DOCKER_PASSWORD', 'dckr_pat_kFjk-g926QN8IvBB7wy4za2HbF8')

# Configuration file d'attente de messages (broker)
TASK_QUEUE_BROKER = os.environ.get('TASK_QUEUE_BROKER', 'mqtt://localhost:1883')
TASK_QUEUE_RESULTS = os.environ.get('TASK_QUEUE_RESULTS', 'redis://localhost:6379/1')

# Define constants for repeated literals
PAHO_MQTT_VERSION = 'paho-mqtt==1.6.1'
REQUESTS_VERSION = 'requests==2.28.1'  # Define constant for requests version

# Configuration Docker pour les différents types de tâches
DOCKER_IMAGES = {
    'TEXT_PROCESSING': {
        'base_image': 'alpine:3.14',
        'python_packages': [PAHO_MQTT_VERSION, REQUESTS_VERSION, 'python-dotenv==1.0.0'],
    },
    'HASH_CALCULATION': {
        'base_image': 'alpine:3.14',
        'python_packages': [PAHO_MQTT_VERSION, REQUESTS_VERSION, 'hashlib', 'python-dotenv==1.0.0'],
    },
    'IMAGE_CONVERSION': {
        'base_image': 'python:3.9-slim',
        'python_packages': [PAHO_MQTT_VERSION, REQUESTS_VERSION, 'pillow==9.5.0', 'python-dotenv==1.0.0', 'opencv-python-headless==4.7.0.72'],
    },
    'PDF_GENERATION': {
        'base_image': 'python:3.9-slim',
        'python_packages': [PAHO_MQTT_VERSION, REQUESTS_VERSION, 'reportlab==3.6.12', 'WeasyPrint==58.1', 'python-dotenv==1.0.0'],
    }
}

# Paramètres de ressources par défaut
DEFAULT_RESOURCES = {
    'TEXT_PROCESSING': {
        'cpu': 'low',
        'memory': '256MB',
        'network': 'low'
    },
    'HASH_CALCULATION': {
        'cpu': 'medium',
        'memory': '256MB',
        'network': 'low'
    },
    'IMAGE_CONVERSION': {
        'cpu': 'medium',
        'memory': '512MB',
        'network': 'medium',
        'gpu': 'preferred'
    },
    'PDF_GENERATION': {
        'cpu': 'medium',
        'memory': '1GB',
        'network': 'low'
    }
}

# Configuration de sécurité Docker
DOCKER_SECURITY = {
    'privileged': False,
    'read_only': True,
    'cap_drop': ['ALL'],
    'cap_add': ['CHOWN', 'SETUID', 'SETGID', 'DAC_OVERRIDE'],
    'security_opt': ['no-new-privileges'],
    'user': '1000:1000'  # Exécuter en tant qu'utilisateur non-root
}

# Paramètres de timeout pour les opérations Docker
DOCKER_BUILD_TIMEOUT = 300  # secondes
DOCKER_PUSH_TIMEOUT = 300   # secondes
DOCKER_PULL_TIMEOUT = 180   # secondes

# Paramètres de communication MQTT
MQTT_BROKER_URL = 'mqtt://localhost:1883'
MANAGER_ID = 'workflow_manager_1'
MANAGER_SECRET = 'default_secret_key'

# Répertoire pour les résultats
RESULTS_DIRECTORY = '/tmp/workflow_manager/results'
os.makedirs(RESULTS_DIRECTORY, exist_ok=True)

# Paramètres de timeout
AUTH_TIMEOUT = 10
REQUEST_TIMEOUT = 10
DOWNLOAD_TIMEOUT = 30